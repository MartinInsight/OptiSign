// Chart instances global variables
let KCCIChart;
let SCFIChart;
let WCIChart;
let IACIChart;
let blankSailingChart;
let FBXChart;
let XSIChart;
let MBCIChart; // New chart for MBCI
let exchangeRateChart; // Chart for exchange rates

// Path to the JSON data file generated by the Python script
const DATA_JSON_URL = 'data/crawling_data.json';

document.addEventListener('DOMContentLoaded', () => {
    // --- Chart Initialization Function ---
    // This function creates or updates a Chart.js instance.
    // Added isAggregated parameter to control X-axis behavior
    // Changed datasets to expect {x, y} objects for time series
    const setupChart = (chartId, type, datasets, additionalOptions = {}, isAggregated = false) => {
        const ctx = document.getElementById(chartId);
        if (ctx) {
            // Destroy existing chart instance if it exists to prevent conflicts
            if (Chart.getChart(chartId)) {
                Chart.getChart(chartId).destroy();
            }

            const defaultOptions = {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Date' // Default X-axis title
                        },
                        type: 'time',
                        time: {
                            unit: isAggregated ? 'month' : 'day', // Use 'month' for aggregated, 'day' for granular
                            displayFormats: {
                                // Updated to 'MMM 'yy' for month unit as per requirements
                                month: 'MMM \'yy',
                                // Updated to 'M/dd' for day unit to fix RangeError and ensure two-digit day
                                day: 'M/dd' 
                            },
                            // Tooltip format updated to 'M/d/yyyy' as per requirements
                            tooltipFormat: 'M/d/yyyy' 
                        },
                        ticks: {
                            source: 'auto',
                            autoSkipPadding: 10 // Add padding to avoid overlapping labels
                        },
                        grid: {
                            display: false // Remove vertical grid lines (X-axis grid)
                        }
                    },
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Value' // Default Y-axis title
                        },
                        grid: {
                            display: false // Remove horizontal grid lines (Y-axis grid)
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'right' // Legend position is 'right'
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false
                    }
                },
                elements: {
                    point: {
                        radius: 0 // Remove points on line charts
                    }
                }
            };

            // Apply maxTicksLimit only if isAggregated is true
            if (isAggregated) {
                defaultOptions.scales.x.ticks.maxTicksLimit = 12;
            } else {
                delete defaultOptions.scales.x.ticks.maxTicksLimit;
            }

            // Merge default options with any additional options provided
            const options = { ...defaultOptions, ...additionalOptions };
            if (options.scales && additionalOptions.scales) {
                options.scales = { ...defaultOptions.scales, ...additionalOptions.scales };
                if (options.scales.x && additionalOptions.scales.x) {
                    options.scales.x = { ...defaultOptions.scales.x, ...additionalOptions.scales.x };
                    if (isAggregated) {
                        options.scales.x.ticks.maxTicksLimit = 12;
                    } else {
                        delete options.scales.x.ticks.maxTicksLimit;
                    }
                }
                if (options.scales.y && additionalOptions.scales.y) {
                    options.scales.y = { ...defaultOptions.scales.y, ...additionalOptions.scales.y };
                }
            }

            // For bar charts, Chart.js typically expects `labels` in `data` object, not `x` in dataset.data
            // If type is 'bar' and labels are provided in additionalOptions, use them.
            let chartData = { datasets: datasets };
            if (type === 'bar' && additionalOptions.labels) {
                chartData = { labels: additionalOptions.labels, datasets: datasets };
                delete additionalOptions.labels; // Remove from options to avoid conflict
            }


            return new Chart(ctx, {
                type: type,
                data: chartData,
                options: options
            });
        }
        return null;
    };

    // --- Color Palette Helper ---
    const colors = [
        'rgba(0, 101, 126, 0.8)', // Teal
        'rgba(0, 58, 82, 0.8)',  // Navy
        'rgba(40, 167, 69, 0.8)', // Green
        'rgba(253, 126, 20, 0.8)', // Orange
        'rgba(111, 66, 193, 0.8)', // Purple
        'rgba(220, 53, 69, 0.8)', // Red
        'rgba(23, 162, 184, 0.8)', // Info Blue
        'rgba(108, 117, 125, 0.8)' // Gray
    ];

    const borderColors = [
        '#00657e', // Darker Teal
        '#003A52', // Darker Navy
        '#218838', // Darker Green
        '#e68a00', // Darker Orange
        '#5a32b2', // Darker Purple
        '#c82333', // Darker Red
        '#138496', // Darker Info Blue
        '#6c757d' // Darker Gray
    ];

    let colorIndex = 0;
    const getNextColor = () => {
        const color = colors[colorIndex % colors.length];
        colorIndex++;
        return color;
    };
    const getNextBorderColor = () => {
        const color = borderColors[colorIndex % borderColors.length]; // Use same index for border color
        return color;
    };

    // --- Helper function to clean label names (no longer needed for chart labels) ---
    // const cleanLabel = (fullLabel) => {
    //     // Remove prefixes like "KCCI ", "SCFI ", "WCI ", "FBX ", "XSI ", "MBCI "
    //     return fullLabel.replace(/^(KCCI|SCFI|WCI|FBX|XSI|MBCI)\s/i, '');
    // };

    // --- Helper function to aggregate data by month ---
    // This function will now only be used for the Blank Sailing bar chart
    const aggregateDataByMonth = (data, numMonths = 12) => {
        if (data.length === 0) return { aggregatedData: [], monthlyLabels: [] };

        // Sort data by date in ascending order (important for time series)
        data.sort((a, b) => new Date(a.date) - new Date(b.date));

        const monthlyDataMap = new Map(); // Map to store data grouped by 'YYYY-MM'

        // Determine the range of months to consider based on the latest date
        const latestDate = new Date(data[data.length - 1].date);
        const startDate = new Date(latestDate);
        startDate.setMonth(latestDate.getMonth() - (numMonths - 1)); // Go back numMonths-1 months to include current month

        // Generate all month keys for the last numMonths, ensuring no gaps
        const allMonthKeys = [];
        let currentMonth = new Date(startDate.getFullYear(), startDate.getMonth(), 1); // Start from the beginning of the start month
        while (currentMonth <= latestDate) {
            allMonthKeys.push(`${currentMonth.getFullYear()}-${(currentMonth.getMonth() + 1).toString().padStart(2, '0')}`);
            currentMonth.setMonth(currentMonth.getMonth() + 1);
        }

        // Populate monthlyDataMap with sums and counts from raw data
        data.forEach(item => {
            const date = new Date(item.date);
            const yearMonth = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`;

            if (!monthlyDataMap.has(yearMonth)) {
                monthlyDataMap.set(yearMonth, {});
            }
            const monthEntry = monthlyDataMap.get(yearMonth);

            for (const key in item) {
                if (key !== 'date' && item[key] !== null && !isNaN(item[key])) {
                    if (!monthEntry[key]) {
                        monthEntry[key] = { sum: 0, count: 0 };
                    }
                    monthEntry[key].sum += item[key];
                    monthEntry[key].count++;
                }
            }
        });

        const aggregatedData = [];
        const monthlyLabels = [];

        // Aggregate data for each month key in the desired range
        // Ensure all possible data keys are considered, even if a month has no data for a specific key
        const allDataKeys = new Set();
        if (data.length > 0) {
            Object.keys(data[0]).forEach(key => {
                if (key !== 'date') allDataKeys.add(key);
            });
        }

        allMonthKeys.forEach(yearMonth => {
            const monthEntry = monthlyDataMap.get(yearMonth);
            const newEntry = { date: yearMonth + '-01' }; // Use first day of the month for consistent date

            allDataKeys.forEach(key => {
                newEntry[key] = monthEntry && monthEntry[key] && monthEntry[key].count > 0
                                ? monthEntry[key].sum / monthEntry[key].count
                                : null; // Use null for missing data
            });
            
            aggregatedData.push(newEntry);
            monthlyLabels.push(yearMonth + '-01'); // For Chart.js labels
        });

        return { aggregatedData: aggregatedData, monthlyLabels: monthlyLabels };
    };

    // --- Generic Slider Logic ---
    const setupSlider = (slidesSelector, intervalTime) => {
        const slides = document.querySelectorAll(slidesSelector);
        let currentSlide = 0;

        const showSlide = (index) => {
            slides.forEach((slide, i) => {
                if (i === index) {
                    slide.classList.add('active');
                } else {
                    slide.classList.remove('active');
                }
            });
        };

        const nextSlide = () => {
            currentSlide = (currentSlide + 1) % slides.length;
            showSlide(currentSlide);
        };

        if (slides.length > 0) {
            showSlide(currentSlide);
            if (slides.length > 1) {
                setInterval(nextSlide, intervalTime);
            }
        }
    };

    // --- World Clock Logic ---
    const cityTimezones = {
        'la': 'America/Los_Angeles',
        'ny': 'America/New_York',
        'paris': 'Europe/Paris',
        'shanghai': 'Asia/Shanghai',
        'seoul': 'Asia/Seoul',
        'sydney': 'Australia/Sydney'
    };

    function updateWorldClocks() {
        const now = new Date();
        for (const cityKey in cityTimezones) {
            const timezone = cityTimezones[cityKey];
            const options = {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                hour12: false,
                timeZone: timezone
            };
            const timeString = new Intl.DateTimeFormat('en-US', options).format(now);
            const elementId = `time-${cityKey}`;
            const timeElement = document.getElementById(elementId);
            if (timeElement) {
                timeElement.textContent = timeString;
            }
        }
    }

    // --- Table Rendering Function ---
    const renderTable = (containerId, headers, rows) => {
        const container = document.getElementById(containerId);
        if (!container) {
            console.warn(`Table container with ID ${containerId} not found.`);
            return;
        }

        // Clear previous content
        container.innerHTML = '';

        if (!headers || headers.length === 0 || !rows || rows.length === 0) {
            container.innerHTML = '<p class="text-gray-600 text-center">No data available for this table.</p>';
            return;
        }

        const table = document.createElement('table');
        table.classList.add('data-table'); // Add a class for styling

        // Create table header
        const thead = document.createElement('thead');
        const headerRow = document.createElement('tr');
        headers.forEach(headerText => {
            const th = document.createElement('th');
            th.textContent = headerText;
            headerRow.appendChild(th);
        });
        thead.appendChild(headerRow);
        table.appendChild(thead);

        // Create table body
        const tbody = document.createElement('tbody');
        rows.forEach(rowData => {
            const tr = document.createElement('tr');
            headers.forEach(header => {
                const td = document.createElement('td');
                // Determine which property to use based on the header
                let content = '';
                let colorClass = '';

                if (header.includes('Weekly Change')) {
                    const weeklyChange = rowData.weekly_change;
                    if (weeklyChange) {
                        content = `${weeklyChange.value} (${weeklyChange.percentage})`;
                        colorClass = weeklyChange.color_class;
                    }
                } else if (header.includes('Current Index')) {
                    content = rowData.current_index || '-';
                } else if (header.includes('Previous Index')) {
                    content = rowData.previous_index || '-';
                } else if (header.includes('항로')) { // Route column
                    content = rowData.route || '-';
                } else {
                    // Fallback for any other unexpected headers
                    content = rowData[header.toLowerCase().replace(/\s/g, '_')] || '-';
                }
                
                td.textContent = content;
                if (colorClass) {
                    td.classList.add(colorClass);
                }
                tr.appendChild(td);
            });
            tbody.appendChild(tr);
        });
        table.appendChild(tbody);
        container.appendChild(table);
    };

    // --- Mapping between table route names and chart data keys ---
    const routeToDataKeyMap = {
        KCCI: {
            "종합지수": "Composite_Index",
            "미주서안": "US_West_Coast",
            "미주동안": "US_East_Coast",
            "유럽": "Europe",
            "지중해": "Mediterranean",
            "중동": "Middle_East",
            "호주": "Australia",
            "남미동안": "South_America_East_Coast",
            "남미서안": "South_America_West_Coast",
            "남아프리카": "South_Africa",
            "서아프리카": "West_Africa",
            "중국": "China",
            "일본": "Japan",
            "동남아시아": "Southeast_Asia"
        },
        SCFI: {
            "Comprehensive Index": "Composite_Index_1",
            "Europe (Base port)": "North_Europe", // Assuming this mapping based on previous code
            "Mediterranean (Base port)": "Mediterranean_1",
            "USWC (Base port)": "US_West_Coast_1",
            "USEC (Base port)": "US_East_Coast_1",
            "Persian Gulf and Red Sea (Dubai)": "Middle_East_1",
            "Australia/New Zealand (Melbourne)": "Australia_New_Zealand_SCFI",
            "East/West Africa (Lagos)": "East_West_Africa_SCFI",
            "South Africa (Durban)": "South_Africa_SCFI",
            "West Japan (Base port)": "Japan_West_Coast_SCFI",
            "East Japan (Base port)": "Japan_East_Coast_SCFI",
            "Southeast Asia (Singapore)": "Southeast_Asia_1",
            "Korea (Pusan)": "Korea_SCFI",
            "Central/South America West Coast(Manzanillo)": "South_America_SCFI" // Assuming this mapping
        },
        WCI: {
            "Composite Index": "Composite_Index_2",
            "Shanghai-Rotterdam": "Shanghai_Rotterdam_WCI",
            "Rotterdam-Shanghai": "Rotterdam_Shanghai_WCI",
            "Shanghai-Genoa": "Shanghai_Genoa_WCI",
            "Shanghai-LosAngeles": "Shanghai_Los_Angeles_WCI",
            "LosAngeles-Shanghai": "Los_Angeles_Shanghai_WCI",
            "Shanghai-NewYork": "Shanghai_New_York_WCI",
            "NewYork-Rotterdam": "New_York_Rotterdam_WCI",
            "Rotterdam-NewYork": "Rotterdam_New_York_WCI",
            "Europe - South America East Coast": "Europe_South_America_East_Coast_WCI", // Placeholder, verify actual key
            "Europe - South America West Coast": "Europe_South_America_West_Coast_WCI" // Placeholder, verify actual key
        },
        IACI: {
            "US$/40ft": "Composite_Index_3"
        },
        FBX: {
            "Global Container Freight Index": "Composite_Index_4",
            "China/East Asia - North America West Coast": "China_EA_US_West_Coast_FBX",
            "North America West Coast - China/East Asia": "US_West_Coast_China_EA_FBX",
            "China/East Asia - North America East Coast": "China_EA_US_East_Coast_FBX",
            "North America East Coast - China/East Asia": "US_East_Coast_China_EA_FBX",
            "China/East Asia - North Europe": "China_EA_North_Europe_FBX",
            "North Europe - China/East Asia": "North_Europe_China_EA_FBX",
            "China/East Asia - Mediterranean": "China_EA_Mediterranean_FBX",
            "Mediterranean - China/East Asia": "Mediterranean_China_EA_FBX",
            "North America East Coast - North Europe": "North_America_East_Coast_North_Europe_FBX", // Placeholder
            "North Europe - North America East Coast": "North_Europe_North_America_East_Coast_FBX", // Placeholder
            "Europe - South America East Coast": "Europe_South_America_East_Coast_FBX", // Placeholder
            "Europe - South America West Coast": "Europe_South_America_West_Coast_FBX" // Placeholder
        },
        XSI: {
            "Far East - N. Europe": "XSI_East_Asia_North_Europe",
            "N. Europe - Far East": "XSI_North_Europe_East_Asia",
            "Far East - USWC": "XSI_East_Asia_US_West_Coast",
            "USWC - Far East": "XSI_US_West_Coast_East_Asia",
            "Far East - SAEC": "XSI_East_Asia_South_America_East_Coast",
            "N. Europe - USEC": "XSI_North_Europe_US_East_Coast",
            "USEC - N. Europe": "XSI_US_East_Coast_North_Europe",
            "N. Europe - SAEC": "XSI_North_Europe_South_America_East_Coast"
        },
        MBCI: {
            "Index(종합지수)": "MBCI_MBCI_Value",
            // "$/day(정기용선, Time charter)": No corresponding chart data, so it will be skipped
        }
    };

    // --- Helper function to create datasets based on table rows and chart data ---
    const createDatasetsFromTableRows = (indexType, chartData, tableRows) => {
        const datasets = [];
        const mapping = routeToDataKeyMap[indexType];
        if (!mapping) {
            console.warn(`No data key mapping found for index type: ${indexType}`);
            return datasets;
        }

        tableRows.forEach(row => {
            const routeName = row.route;
            const dataKey = mapping[routeName];
            
            // Only create a dataset if a corresponding data key exists and current_index is not empty
            // This handles cases like MBCI's second row which has no chart data
            if (dataKey && row.current_index !== "") { 
                datasets.push({
                    label: routeName, // Use the route name directly from the table for the legend
                    data: chartData.map(item => ({ x: item.date, y: item[dataKey] })),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: (routeName.includes('Composite Index') || routeName.includes('종합지수') || routeName.includes('Global Container Freight Index') || routeName.includes('US$/40ft') || routeName.includes('Index(종합지수)')) ? 2 : 1, // Make composite index lines thicker
                    fill: false
                });
            }
        });
        return datasets;
    };


    // --- Data Loading and Dashboard Update Function ---
    async function loadAndDisplayData() {
        let allDashboardData = {}; // Will hold chart_data, weather_data, exchange_rates, table_data
        try {
            const response = await fetch(DATA_JSON_URL);
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            allDashboardData = await response.json();
            console.log("Loaded all dashboard data:", allDashboardData);

            const chartDataBySection = allDashboardData.chart_data || {};
            const weatherData = allDashboardData.weather_data || {};
            const exchangeRatesData = allDashboardData.exchange_rates || [];
            const tableDataBySection = allDashboardData.table_data || {}; // New: Get table data

            if (Object.keys(chartDataBySection).length === 0) {
                console.warn("No chart data sections found in the JSON file.");
                document.querySelector('.chart-slider-container').innerHTML = '<p class="placeholder-text">No chart data available.</p>';
                return;
            }

            // --- Update Weather Info ---
            const currentWeatherData = weatherData.current || {};
            const forecastWeatherData = weatherData.forecast || [];

            document.getElementById('temperature-current').textContent = currentWeatherData.LA_Temperature ? `${currentWeatherData.LA_Temperature}°F` : '--°F';
            document.getElementById('status-current').textContent = currentWeatherData.LA_WeatherStatus || 'Loading...';
            // Simple icon mapping (you might want a more robust one)
            const weatherIconUrl = (status) => {
                if (status && status.toLowerCase().includes('clear')) return 'https://placehold.co/80x80/00657e/ffffff?text=SUN'; // Example for clear sky
                if (status && status.toLowerCase().includes('cloud')) return 'https://placehold.co/80x80/003A52/ffffff/ffffff?text=CLOUD'; // Example for clouds
                if (status && status.toLowerCase().includes('rain')) return 'https://placehold.co/80x80/28A745/ffffff?text=RAIN'; // Example for rain
                return 'https://placehold.co/80x80/cccccc/ffffff?text=Icon'; // Default placeholder
            };
            document.getElementById('weather-icon-current').src = weatherIconUrl(currentWeatherData.LA_WeatherStatus);

            document.getElementById('humidity-current').textContent = currentWeatherData.LA_Humidity ? `${currentWeatherData.LA_Humidity}%` : '--%';
            document.getElementById('wind-speed-current').textContent = currentWeatherData.LA_WindSpeed ? `${currentWeatherData.LA_WindSpeed} mph` : '-- mph';
            document.getElementById('pressure-current').textContent = currentWeatherData.LA_Pressure ? `${currentWeatherData.LA_Pressure} hPa` : '-- hPa';
            document.getElementById('visibility-current').textContent = currentWeatherData.LA_Visibility ? `${currentWeatherData.LA_Visibility} mile` : '-- mile';
            document.getElementById('sunrise-time').textContent = currentWeatherData.LA_Sunrise || '--';
            document.getElementById('sunset-time').textContent = currentWeatherData.LA_Sunset || '--';

            const forecastBody = document.getElementById('forecast-body');
            forecastBody.innerHTML = ''; // Clear existing rows
            if (forecastWeatherData.length > 0) {
                forecastWeatherData.slice(0, 7).forEach(day => { // Display up to 7 days
                    const row = forecastBody.insertRow();
                    row.insertCell().textContent = day.date || '--';
                    row.insertCell().textContent = day.min_temp ? `${day.min_temp}°F` : '--';
                    row.insertCell().textContent = day.max_temp ? `${day.max_temp}°F` : '--';
                    row.insertCell().textContent = day.status || '--';
                });
            } else {
                forecastBody.innerHTML = '<tr><td colspan="4">No forecast data available.</td></tr>';
            }


            // --- Update Exchange Rate Info ---
            const filteredExchangeRates = exchangeRatesData.slice(Math.max(exchangeRatesData.length - 30, 0)); // Latest 1 month (approx 30 days)
            const exchangeRateLabels = filteredExchangeRates.map(item => item.date);
            const exchangeRateValues = filteredExchangeRates.map(item => item.rate);

            const currentExchangeRate = exchangeRateValues[exchangeRateValues.length - 1];
            document.getElementById('current-exchange-rate-value').textContent = currentExchangeRate ? `${currentExchangeRate.toFixed(2)} KRW` : 'Loading...';

            if (exchangeRateChart) exchangeRateChart.destroy();
            exchangeRateChart = setupChart(
                'exchangeRateChartCanvas', 'line',
                [{
                    label: 'USD/KRW Exchange Rate',
                    data: filteredExchangeRates.map(item => ({ x: item.date, y: item.rate })), // Use x,y for time scale
                    backgroundColor: 'rgba(253, 126, 20, 0.5)',
                    borderColor: '#e68a00',
                    borderWidth: 2,
                    fill: false,
                    pointRadius: 0 // No points on exchange rate chart
                }],
                {
                    scales: {
                        x: {
                            type: 'time', // Changed to time scale
                            time: { 
                                unit: 'day', 
                                displayFormats: { day: 'MM-dd' }, // Fixed DD to dd
                                tooltipFormat: 'M/d/yyyy' // Consistent tooltip format
                            },
                            ticks: { autoSkipPadding: 10 } // Removed maxTicksLimit
                        },
                        y: {
                            beginAtZero: false, // Exchange rates might not start at zero
                            grid: { display: false } // Remove grid lines
                        }
                    },
                    plugins: {
                        legend: { display: false } // No legend for this small chart
                    }
                },
                false // Exchange rate chart is granular (not aggregated by month)
            );


            // --- Prepare Chart Data and Initialize Charts ---
            colorIndex = 0; // Reset color index for each chart initialization

            // Chart 1: KCCI - All relevant indices (Granular Data)
            const KCCIData = chartDataBySection.KCCI || [];
            KCCIData.sort((a, b) => new Date(a.date) - new Date(b.date)); // Sort specific section data
            const KCCIDatasets = createDatasetsFromTableRows('KCCI', KCCIData, tableDataBySection.KCCI.rows);
            KCCIChart = setupChart('KCCIChart', 'line', KCCIDatasets, {}, false);
            renderTable('KCCITableContainer', tableDataBySection.KCCI.headers, tableDataBySection.KCCI.rows);


            // Chart 2: SCFI - All relevant indices (Granular Data)
            colorIndex = 0; // Reset color index for each chart
            const SCFIData = chartDataBySection.SCFI || [];
            SCFIData.sort((a, b) => new Date(a.date) - new Date(b.date));
            const SCFIDatasets = createDatasetsFromTableRows('SCFI', SCFIData, tableDataBySection.SCFI.rows);
            SCFIChart = setupChart('SCFIChart', 'line', SCFIDatasets, {}, false);
            renderTable('SCFITableContainer', tableDataBySection.SCFI.headers, tableDataBySection.SCFI.rows);


            // Chart 3: WCI - All relevant indices (Granular Data)
            colorIndex = 0; // Reset color index for each chart
            const WCIData = chartDataBySection.WCI || [];
            WCIData.sort((a, b) => new Date(a.date) - new Date(b.date));
            const WCIDatasets = createDatasetsFromTableRows('WCI', WCIData, tableDataBySection.WCI.rows);
            WCIChart = setupChart('WCIChart', 'line', WCIDatasets, {}, false);
            renderTable('WCITableContainer', tableDataBySection.WCI.headers, tableDataBySection.WCI.rows);


            // Chart 4: IACI Composite Index (Granular Data)
            colorIndex = 0; // Reset color index for each chart
            const IACIData = chartDataBySection.IACI || [];
            IACIData.sort((a, b) => new Date(a.date) - new Date(b.date));
            const IACIDatasets = createDatasetsFromTableRows('IACI', IACIData, tableDataBySection.IACI.rows);
            IACIChart = setupChart('IACIChart', 'line', IACIDatasets, {}, false);
            renderTable('IACITableContainer', tableDataBySection.IACI.headers, tableDataBySection.IACI.rows);


            // Chart 5: BLANK_SAILING Stacked Bar Chart (Keep Aggregated)
            const blankSailingRawData = chartDataBySection.BLANK_SAILING || [];
            const { aggregatedData: aggregatedBlankSailingData, monthlyLabels: blankSailingChartDates } = aggregateDataByMonth(blankSailingRawData, 12);
            
            // Blank Sailing datasets are still manually defined as they are stacked bar charts
            const blankSailingDatasets = [
                {
                    label: 'Gemini Cooperation', // Directly use the label from the table data
                    data: aggregatedBlankSailingData.map(item => ({ x: item.date, y: item.Gemini_Cooperation_Blank_Sailing })),
                    backgroundColor: 'rgba(0, 101, 126, 0.5)', // Light Teal
                    borderColor: '#00657e',
                    borderWidth: 1
                },
                {
                    label: 'MSC', // Directly use the label from the table data
                    data: aggregatedBlankSailingData.map(item => ({ x: item.date, y: item.MSC_Alliance_Blank_Sailing })),
                    backgroundColor: 'rgba(0, 58, 82, 0.5)', // Light Navy
                    borderColor: '#003A52',
                    borderWidth: 1
                },
                {
                    label: 'OCEAN Alliance', // Directly use the label from the table data
                    data: aggregatedBlankSailingData.map(item => ({ x: item.date, y: item.OCEAN_Alliance_Blank_Sailing })),
                    backgroundColor: 'rgba(0, 101, 126, 0.3)', // Lighter Teal
                    borderColor: '#00657e',
                    borderWidth: 1
                },
                {
                    label: 'Premier Alliance', // Directly use the label from the table data
                    data: aggregatedBlankSailingData.map(item => ({ x: item.date, y: item.Premier_Alliance_Blank_Sailing })),
                    backgroundColor: 'rgba(0, 58, 82, 0.3)', // Lighter Navy
                    borderColor: '#003A52',
                    borderWidth: 1
                },
                {
                    label: 'Others/Independent', // Directly use the label from the table data
                    data: aggregatedBlankSailingData.map(item => ({ x: item.date, y: item.Others_Independent_Blank_Sailing })),
                    backgroundColor: 'rgba(0, 101, 126, 0.2)', // Even Lighter Teal
                    borderColor: '#00657e',
                    borderWidth: 1
                }
            ];

            blankSailingChart = setupChart(
                'blankSailingChart', 'bar', blankSailingDatasets,
                {
                    labels: blankSailingChartDates, // Labels for bar chart
                    scales: {
                        x: { stacked: true, type: 'time', time: { unit: 'month', displayFormats: { month: 'MMM \'yy' }, tooltipFormat: 'M/d/yyyy' } }, // Explicitly set time scale for x-axis
                        y: { stacked: true, beginAtZero: true, title: { display: true, text: 'Number of Sailings' } }
                    },
                    elements: { point: { radius: 0 } }
                },
                true
            );
            renderTable('BLANK_SAILINGTableContainer', tableDataBySection.BLANK_SAILING.headers, tableDataBySection.BLANK_SAILING.rows);


            // Chart 6: FBX - All relevant indices (Granular Data)
            colorIndex = 0; // Reset color index for each chart
            const FBXData = chartDataBySection.FBX || [];
            FBXData.sort((a, b) => new Date(a.date) - new Date(b.date));
            const FBXDatasets = createDatasetsFromTableRows('FBX', FBXData, tableDataBySection.FBX.rows);
            FBXChart = setupChart('FBXChart', 'line', FBXDatasets, {}, false);
            renderTable('FBXTableContainer', tableDataBySection.FBX.headers, tableDataBySection.FBX.rows);


            // Chart 7: XSI - All relevant indices (Granular Data)
            colorIndex = 0; // Reset color index for each chart
            const XSIData = chartDataBySection.XSI || [];
            XSIData.sort((a, b) => new Date(a.date) - new Date(b.date));
            const XSIDatasets = createDatasetsFromTableRows('XSI', XSIData, tableDataBySection.XSI.rows);
            XSIChart = setupChart('XSIChart', 'line', XSIDatasets, {}, false);
            renderTable('XSITableContainer', tableDataBySection.XSI.headers, tableDataBySection.XSI.rows);


            // Chart 8: MBCI - All relevant indices (Granular Data)
            colorIndex = 0; // Reset color index for each chart
            const MBCIData = chartDataBySection.MBCI || [];
            MBCIData.sort((a, b) => new Date(a.date) - new Date(b.date));
            const MBCIDatasets = createDatasetsFromTableRows('MBCI', MBCIData, tableDataBySection.MBCI.rows);
            MBCIChart = setupChart('MBCIChart', 'line', MBCIDatasets, {}, false);
            renderTable('MBCITableContainer', tableDataBySection.MBCI.headers, tableDataBySection.MBCI.rows);


            // --- Setup and start auto-cycling for both sliders ---
            setupSlider('.top-info-slide', 10000); // 10 seconds for top info slider
            setupSlider('.chart-slide', 10000); // 10 seconds for chart slider

        } catch (error) {
            console.error("Error loading or processing JSON data:", error);
            document.querySelector('.chart-slider-container').innerHTML = '<p class="placeholder-text" style="color: red;">Error loading chart data. Please check the console.</p>';
        }
    }

    // Initial world clock update and 1-second interval update
    updateWorldClocks();
    setInterval(updateWorldClocks, 1000);

    // Update last updated time
    document.getElementById('last-updated').textContent = `Last Updated: ${new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true })}`;

    // Start loading JSON data and displaying the dashboard
    loadAndDisplayData();
});
