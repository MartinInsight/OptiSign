// Chart instances global variables
let KCCIChart;
let SCFIChart;
let WCIChart;
let IACIChart;
let blankSailingChart;
let FBXChart;
let XSIChart;
let MBCIChart; // New chart for MBCI
let exchangeRateChart; // Chart for exchange rates

// Path to the JSON data file generated by the Python script
const DATA_JSON_URL = 'data/crawling_data.json';

document.addEventListener('DOMContentLoaded', () => {
    // --- Chart Initialization Function ---
    // This function creates or updates a Chart.js instance.
    const setupChart = (chartId, type, datasets, labels = [], additionalOptions = {}) => {
        const ctx = document.getElementById(chartId);
        if (ctx) {
            // Destroy existing chart instance if it exists to prevent conflicts
            if (Chart.getChart(chartId)) {
                Chart.getChart(chartId).destroy();
            }

            const defaultOptions = {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Date' // Default X-axis title
                        },
                        // Configure X-axis for monthly display, 12 points
                        type: 'time',
                        time: {
                            unit: 'month',
                            displayFormats: {
                                month: 'MMM \'YY' // e.g., Jul '24
                            },
                            tooltipFormat: 'MMM D, YYYY'
                        },
                        ticks: {
                            source: 'auto', // Let Chart.js determine best ticks, but hint for max
                            maxTicksLimit: 12, // Limit to 12 ticks for monthly view
                            autoSkipPadding: 10 // Add padding to avoid overlapping labels
                        },
                        grid: {
                            display: false // Remove vertical grid lines (X-axis grid)
                        }
                    },
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Value' // Default Y-axis title
                        },
                        grid: {
                            display: false // Remove horizontal grid lines (Y-axis grid)
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'right' // Legend position is 'right'
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false
                    }
                },
                elements: {
                    point: {
                        radius: 0 // Remove points on line charts
                    }
                }
            };

            // Merge default options with any additional options provided
            const options = { ...defaultOptions, ...additionalOptions };
            if (options.scales && additionalOptions.scales) {
                options.scales = { ...defaultOptions.scales, ...additionalOptions.scales };
                if (options.scales.x && additionalOptions.scales.x) {
                    options.scales.x = { ...defaultOptions.scales.x, ...additionalOptions.scales.x };
                }
                if (options.scales.y && additionalOptions.scales.y) {
                    options.scales.y = { ...defaultOptions.scales.y, ...additionalOptions.scales.y };
                }
            }


            return new Chart(ctx, {
                type: type,
                data: {
                    labels: labels,
                    datasets: datasets // Use the provided datasets
                },
                options: options
            });
        }
        return null;
    };

    // --- Color Palette Helper ---
    const colors = [
        'rgba(0, 101, 126, 0.8)', // Teal
        'rgba(0, 58, 82, 0.8)',  // Navy
        'rgba(40, 167, 69, 0.8)', // Green
        'rgba(253, 126, 20, 0.8)', // Orange
        'rgba(111, 66, 193, 0.8)', // Purple
        'rgba(220, 53, 69, 0.8)', // Red
        'rgba(23, 162, 184, 0.8)', // Info Blue
        'rgba(108, 117, 125, 0.8)' // Gray
    ];

    const borderColors = [
        '#00657e', // Darker Teal
        '#003A52', // Darker Navy
        '#218838', // Darker Green
        '#e68a00', // Darker Orange
        '#5a32b2', // Darker Purple
        '#c82333', // Darker Red
        '#138496', // Darker Info Blue
        '#6c757d' // Darker Gray
    ];

    let colorIndex = 0;
    const getNextColor = () => {
        const color = colors[colorIndex % colors.length];
        colorIndex++;
        return color;
    };
    const getNextBorderColor = () => {
        const color = borderColors[colorIndex % borderColors.length]; // Use same index for border color
        return color;
    };

    // --- Helper function to clean label names ---
    const cleanLabel = (fullLabel) => {
        // Remove prefixes like "KCCI ", "SCFI ", "WCI ", "FBX ", "XSI ", "MBCI "
        return fullLabel.replace(/^(KCCI|SCFI|WCI|FBX|XSI|MBCI)\s/i, '');
    };

    // --- Helper function to aggregate data by month ---
    const aggregateDataByMonth = (data, numMonths = 12) => {
        if (data.length === 0) return { aggregatedData: [], monthlyLabels: [] };

        // Sort data by date in ascending order (important for time series)
        data.sort((a, b) => new Date(a.date) - new Date(b.date));

        const monthlyDataMap = new Map(); // Map to store data grouped by 'YYYY-MM'

        // Determine the range of months to consider based on the latest date
        const latestDate = new Date(data[data.length - 1].date);
        const startDate = new Date(latestDate);
        startDate.setMonth(latestDate.getMonth() - (numMonths - 1)); // Go back numMonths-1 months to include current month

        // Generate all month keys for the last numMonths, ensuring no gaps
        const allMonthKeys = [];
        let currentMonth = new Date(startDate.getFullYear(), startDate.getMonth(), 1); // Start from the beginning of the start month
        while (currentMonth <= latestDate) {
            allMonthKeys.push(`${currentMonth.getFullYear()}-${(currentMonth.getMonth() + 1).toString().padStart(2, '0')}`);
            currentMonth.setMonth(currentMonth.getMonth() + 1);
        }

        // Populate monthlyDataMap with sums and counts from raw data
        data.forEach(item => {
            const date = new Date(item.date);
            const yearMonth = `${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}`;

            if (!monthlyDataMap.has(yearMonth)) {
                monthlyDataMap.set(yearMonth, {});
            }
            const monthEntry = monthlyDataMap.get(yearMonth);

            for (const key in item) {
                if (key !== 'date' && item[key] !== null && !isNaN(item[key])) {
                    if (!monthEntry[key]) {
                        monthEntry[key] = { sum: 0, count: 0 };
                    }
                    monthEntry[key].sum += item[key];
                    monthEntry[key].count++;
                }
            }
        });

        const aggregatedData = [];
        const monthlyLabels = [];

        // Aggregate data for each month key in the desired range
        // Ensure all possible data keys are considered, even if a month has no data for a specific key
        const allDataKeys = new Set();
        if (data.length > 0) {
            Object.keys(data[0]).forEach(key => {
                if (key !== 'date') allDataKeys.add(key);
            });
        }

        allMonthKeys.forEach(yearMonth => {
            const monthEntry = monthlyDataMap.get(yearMonth);
            const newEntry = { date: yearMonth + '-01' }; // Use first day of the month for consistent date

            allDataKeys.forEach(key => {
                newEntry[key] = monthEntry && monthEntry[key] && monthEntry[key].count > 0
                                ? monthEntry[key].sum / monthEntry[key].count
                                : null; // Use null for missing data
            });
            
            aggregatedData.push(newEntry);
            monthlyLabels.push(yearMonth + '-01'); // For Chart.js labels
        });

        return { aggregatedData: aggregatedData, monthlyLabels: monthlyLabels };
    };

    // --- Generic Slider Logic ---
    const setupSlider = (slidesSelector, intervalTime) => {
        const slides = document.querySelectorAll(slidesSelector);
        let currentSlide = 0;

        const showSlide = (index) => {
            slides.forEach((slide, i) => {
                if (i === index) {
                    slide.classList.add('active');
                } else {
                    slide.classList.remove('active');
                }
            });
        };

        const nextSlide = () => {
            currentSlide = (currentSlide + 1) % slides.length;
            showSlide(currentSlide);
        };

        if (slides.length > 0) {
            showSlide(currentSlide);
            if (slides.length > 1) {
                setInterval(nextSlide, intervalTime);
            }
        }
    };

    // --- World Clock Logic ---
    const cityTimezones = {
        'la': 'America/Los_Angeles',
        'ny': 'America/New_York',
        'paris': 'Europe/Paris',
        'shanghai': 'Asia/Shanghai',
        'seoul': 'Asia/Seoul',
        'sydney': 'Australia/Sydney'
    };

    function updateWorldClocks() {
        const now = new Date();
        for (const cityKey in cityTimezones) {
            const timezone = cityTimezones[cityKey];
            const options = {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                hour12: false,
                timeZone: timezone
            };
            const timeString = new Intl.DateTimeFormat('en-US', options).format(now);
            const elementId = `time-${cityKey}`;
            const timeElement = document.getElementById(elementId);
            if (timeElement) {
                timeElement.textContent = timeString;
            }
        }
    }

    // --- Data Loading and Dashboard Update Function ---
    async function loadAndDisplayData() {
        let allDashboardData = {}; // Will hold chart_data, weather_data, exchange_rates
        try {
            const response = await fetch(DATA_JSON_URL);
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            allDashboardData = await response.json();
            console.log("Loaded all dashboard data:", allDashboardData);

            const rawChartData = allDashboardData.chart_data || [];
            const weatherData = allDashboardData.weather_data || {};
            const exchangeRatesData = allDashboardData.exchange_rates || [];

            if (rawChartData.length === 0) {
                console.warn("No chart data found in the JSON file.");
                document.querySelector('.chart-slider-container').innerHTML = '<p class="placeholder-text">No chart data available.</p>';
                return;
            }

            // Sort chart data by date in ascending order (important for time series)
            rawChartData.sort((a, b) => new Date(a.date) - new Date(b.date));

            // Aggregate chart data into monthly averages for 1-year view
            const { aggregatedData: finalChartData, monthlyLabels: chartDates } = aggregateDataByMonth(rawChartData, 12);
            
            if (finalChartData.length === 0) {
                console.warn("No aggregated chart data for the last 12 months.");
                document.querySelector('.chart-slider-container').innerHTML = '<p class="placeholder-text">No chart data available for the last year.</p>';
                return;
            }

            // --- Update Weather Info ---
            const currentWeatherData = weatherData.current || {};
            const forecastWeatherData = weatherData.forecast || [];

            document.getElementById('temperature-current').textContent = currentWeatherData.LA_Temperature ? `${currentWeatherData.LA_Temperature}°F` : '--°F';
            document.getElementById('status-current').textContent = currentWeatherData.LA_WeatherStatus || 'Loading...';
            // Simple icon mapping (you might want a more robust one)
            const weatherIconUrl = (status) => {
                if (status && status.toLowerCase().includes('clear')) return 'https://placehold.co/80x80/00657e/ffffff?text=SUN'; // Example for clear sky
                if (status && status.toLowerCase().includes('cloud')) return 'https://placehold.co/80x80/003A52/ffffff?text=CLOUD'; // Example for clouds
                if (status && status.toLowerCase().includes('rain')) return 'https://placehold.co/80x80/28A745/ffffff?text=RAIN'; // Example for rain
                return 'https://placehold.co/80x80/cccccc/ffffff?text=Icon'; // Default placeholder
            };
            document.getElementById('weather-icon-current').src = weatherIconUrl(currentWeatherData.LA_WeatherStatus);

            document.getElementById('humidity-current').textContent = currentWeatherData.LA_Humidity ? `${currentWeatherData.LA_Humidity}%` : '--%';
            document.getElementById('wind-speed-current').textContent = currentWeatherData.LA_WindSpeed ? `${currentWeatherData.LA_WindSpeed} mph` : '-- mph';
            document.getElementById('pressure-current').textContent = currentWeatherData.LA_Pressure ? `${currentWeatherData.LA_Pressure} hPa` : '-- hPa';
            document.getElementById('visibility-current').textContent = currentWeatherData.LA_Visibility ? `${currentWeatherData.LA_Visibility} mile` : '-- mile';
            document.getElementById('sunrise-time').textContent = currentWeatherData.LA_Sunrise || '--';
            document.getElementById('sunset-time').textContent = currentWeatherData.LA_Sunset || '--';
            // Removed fine dust update as per user request and HTML removal

            const forecastBody = document.getElementById('forecast-body');
            forecastBody.innerHTML = ''; // Clear existing rows
            if (forecastWeatherData.length > 0) {
                forecastWeatherData.slice(0, 7).forEach(day => { // Display up to 7 days
                    const row = forecastBody.insertRow();
                    row.insertCell().textContent = day.date || '--';
                    row.insertCell().textContent = day.min_temp ? `${day.min_temp}°F` : '--';
                    row.insertCell().textContent = day.max_temp ? `${day.max_temp}°F` : '--';
                    row.insertCell().textContent = day.status || '--';
                });
            } else {
                forecastBody.innerHTML = '<tr><td colspan="4">No forecast data available.</td></tr>';
            }


            // --- Update Exchange Rate Info ---
            const filteredExchangeRates = exchangeRatesData.slice(Math.max(exchangeRatesData.length - 30, 0)); // Latest 1 month (approx 30 days)
            const exchangeRateLabels = filteredExchangeRates.map(item => item.date);
            const exchangeRateValues = filteredExchangeRates.map(item => item.rate);

            const currentExchangeRate = exchangeRateValues[exchangeRateValues.length - 1];
            document.getElementById('current-exchange-rate-value').textContent = currentExchangeRate ? `${currentExchangeRate.toFixed(2)} KRW` : 'Loading...';

            if (exchangeRateChart) exchangeRateChart.destroy();
            exchangeRateChart = setupChart(
                'exchangeRateChartCanvas', 'line',
                [{
                    label: 'USD/KRW Exchange Rate',
                    data: exchangeRateValues,
                    backgroundColor: 'rgba(253, 126, 20, 0.5)',
                    borderColor: '#e68a00',
                    borderWidth: 2,
                    fill: false,
                    pointRadius: 0 // No points on exchange rate chart
                }],
                exchangeRateLabels,
                {
                    scales: {
                        x: {
                            type: 'category', // Use category for exchange rate dates like "MM-DD"
                            time: { unit: 'day', displayFormats: { day: 'MM-DD' } }, // Format for exchange rate dates
                            // Removed maxTicksLimit to allow more ticks for a month view
                        },
                        y: {
                            beginAtZero: false, // Exchange rates might not start at zero
                            grid: { display: false } // Remove grid lines
                        }
                    },
                    plugins: {
                        legend: { display: false } // No legend for this small chart
                    }
                }
            );


            // --- Prepare Chart Data and Initialize Charts ---
            colorIndex = 0; // Reset color index for each chart initialization

            // Chart 1: KCCI - All relevant indices
            const KCCIDatasets = [
                {
                    label: cleanLabel('KCCI Composite Index'),
                    data: finalChartData.map(item => item.KCCI_Composite_Index),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 2,
                    fill: false
                },
                {
                    label: cleanLabel('KCCI US West Coast'),
                    data: finalChartData.map(item => item.KCCI_US_West_Coast),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('KCCI US East Coast'),
                    data: finalChartData.map(item => item.KCCI_US_East_Coast),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('KCCI Europe'),
                    data: finalChartData.map(item => item.KCCI_Europe),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('KCCI Mediterranean'),
                    data: finalChartData.map(item => item.KCCI_Mediterranean),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('KCCI Middle East'),
                    data: finalChartData.map(item => item.KCCI_Middle_East),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('KCCI Australia'),
                    data: finalChartData.map(item => item.KCCI_Australia),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('KCCI South America East Coast'),
                    data: finalChartData.map(item => item.KCCI_South_America_East_Coast),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('KCCI South America West Coast'),
                    data: finalChartData.map(item => item.KCCI_South_America_West_Coast),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('KCCI South Africa'),
                    data: finalChartData.map(item => item.KCCI_South_Africa),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('KCCI West Africa'),
                    data: finalChartData.map(item => item.KCCI_West_Africa),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('KCCI China'),
                    data: finalChartData.map(item => item.KCCI_China),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('KCCI Japan'),
                    data: finalChartData.map(item => item.KCCI_Japan),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('KCCI Southeast Asia'),
                    data: finalChartData.map(item => item.KCCI_Southeast_Asia),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                }
            ];
            KCCIChart = setupChart('KCCIChart', 'line', KCCIDatasets, chartDates);

            // Chart 2: SCFI - All relevant indices
            colorIndex = 0; // Reset color index for each chart
            const SCFIDatasets = [
                {
                    label: cleanLabel('SCFI Composite Index'),
                    data: finalChartData.map(item => item.SCFI_Composite_Index),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 2,
                    fill: false
                },
                {
                    label: cleanLabel('SCFI US West Coast'),
                    data: finalChartData.map(item => item.SCFI_US_West_Coast),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('SCFI US East Coast'),
                    data: finalChartData.map(item => item.SCFI_US_East_Coast),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('SCFI North Europe'),
                    data: finalChartData.map(item => item.SCFI_North_Europe),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('SCFI Mediterranean'),
                    data: finalChartData.map(item => item.SCFI_Mediterranean),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('SCFI Southeast Asia'),
                    data: finalChartData.map(item => item.SCFI_Southeast_Asia),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('SCFI Middle East'),
                    data: finalChartData.map(item => item.SCFI_Middle_East),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('SCFI Australia/New Zealand'),
                    data: finalChartData.map(item => item.Australia_New_Zealand_SCFI),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('SCFI South America'),
                    data: finalChartData.map(item => item.South_America_SCFI),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('SCFI Japan West Coast'),
                    data: finalChartData.map(item => item.Japan_West_Coast_SCFI),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('SCFI Japan East Coast'),
                    data: finalChartData.map(item => item.Japan_East_Coast_SCFI),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('SCFI Korea'),
                    data: finalChartData.map(item => item.Korea_SCFI),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('SCFI East/West Africa'),
                    data: finalChartData.map(item => item.East_West_Africa_SCFI),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('SCFI South Africa'),
                    data: finalChartData.map(item => item.South_Africa_SCFI),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                }
            ];
            SCFIChart = setupChart('SCFIChart', 'line', SCFIDatasets, chartDates);

            // Chart 3: WCI - All relevant indices
            colorIndex = 0; // Reset color index for each chart
            const WCIDatasets = [
                {
                    label: cleanLabel('WCI Composite Index'),
                    data: finalChartData.map(item => item.WCI_Composite_Index),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 2,
                    fill: false
                },
                {
                    label: cleanLabel('WCI Shanghai → Rotterdam'),
                    data: finalChartData.map(item => item.Shanghai_Rotterdam_WCI),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('WCI Rotterdam → Shanghai'),
                    data: finalChartData.map(item => item.Rotterdam_Shanghai_WCI),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('WCI Shanghai → Genoa'),
                    data: finalChartData.map(item => item.Shanghai_Genoa_WCI),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('WCI Shanghai → Los Angeles'),
                    data: finalChartData.map(item => item.Shanghai_Los_Angeles_WCI),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('WCI Los Angeles → Shanghai'),
                    data: finalChartData.map(item => item.Los_Angeles_Shanghai_WCI),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('WCI Shanghai → New York'),
                    data: finalChartData.map(item => item.Shanghai_New_York_WCI),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('WCI New York → Rotterdam'),
                    data: finalChartData.map(item => item.New_York_Rotterdam_WCI),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('WCI Rotterdam → New York'),
                    data: finalChartData.map(item => item.Rotterdam_New_York_WCI),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                }
            ];
            WCIChart = setupChart('WCIChart', 'line', WCIDatasets, chartDates);

            // Chart 4: IACI Composite Index
            colorIndex = 0; // Reset color index for each chart
            IACIChart = setupChart(
                'IACIChart', 'line',
                [{
                    label: cleanLabel('IACI Composite Index'),
                    data: finalChartData.map(item => item.IACI_Composite_Index),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 2,
                    fill: false
                }],
                chartDates
            );

            // Chart 5: BLANK_SAILING Stacked Bar Chart (No changes, user requested to keep it as is)
            const blankSailingDatasets = [
                {
                    label: cleanLabel('Gemini Cooperation'),
                    data: finalChartData.map(item => item.Gemini_Cooperation_Blank_Sailing),
                    backgroundColor: 'rgba(0, 101, 126, 0.5)', // Light Teal
                    borderColor: '#00657e',
                    borderWidth: 1
                },
                {
                    label: cleanLabel('MSC Alliance'),
                    data: finalChartData.map(item => item.MSC_Alliance_Blank_Sailing),
                    backgroundColor: 'rgba(0, 58, 82, 0.5)', // Light Navy
                    borderColor: '#003A52',
                    borderWidth: 1
                },
                {
                    label: cleanLabel('OCEAN Alliance'),
                    data: finalChartData.map(item => item.OCEAN_Alliance_Blank_Sailing),
                    backgroundColor: 'rgba(0, 101, 126, 0.3)', // Lighter Teal
                    borderColor: '#00657e',
                    borderWidth: 1
                },
                {
                    label: cleanLabel('Premier Alliance'),
                    data: finalChartData.map(item => item.Premier_Alliance_Blank_Sailing),
                    backgroundColor: 'rgba(0, 58, 82, 0.3)', // Lighter Navy
                    borderColor: '#003A52',
                    borderWidth: 1
                },
                {
                    label: cleanLabel('Others/Independent'),
                    data: finalChartData.map(item => item.Others_Independent_Blank_Sailing),
                    backgroundColor: 'rgba(0, 101, 126, 0.2)', // Even Lighter Teal
                    borderColor: '#00657e',
                    borderWidth: 1
                }
            ];

            blankSailingChart = setupChart(
                'blankSailingChart', 'bar', blankSailingDatasets, chartDates,
                {
                    scales: {
                        x: { stacked: true },
                        y: { stacked: true, title: { display: true, text: 'Number of Sailings' } }
                    },
                    elements: { point: { radius: 0 } } // Ensure no points on bar chart if type is changed later
                }
            );

            // Chart 6: FBX - All relevant indices
            colorIndex = 0; // Reset color index for each chart
            const FBXDatasets = [
                {
                    label: cleanLabel('FBX China/EA → US West Coast'),
                    data: finalChartData.map(item => item.China_EA_US_West_Coast_FBX),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 2,
                    fill: false
                },
                {
                    label: cleanLabel('FBX US West Coast → China/EA'),
                    data: finalChartData.map(item => item.US_West_Coast_China_EA_FBX),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('FBX China/EA → US East Coast'),
                    data: finalChartData.map(item => item.China_EA_US_East_Coast_FBX),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('FBX US East Coast → China/EA'),
                    data: finalChartData.map(item => item.US_East_Coast_China_EA_FBX),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('FBX China/EA → North Europe'),
                    data: finalChartData.map(item => item.China_EA_North_Europe_FBX),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('FBX North Europe → China/EA'),
                    data: finalChartData.map(item => item.North_Europe_China_EA_FBX),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('FBX China/EA → Mediterranean'),
                    data: finalChartData.map(item => item.China_EA_Mediterranean_FBX),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('FBX Mediterranean → China/EA'),
                    data: finalChartData.map(item => item.Mediterranean_China_EA_FBX),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                }
            ];
            FBXChart = setupChart('FBXChart', 'line', FBXDatasets, chartDates);

            // Chart 7: XSI - All relevant indices
            colorIndex = 0; // Reset color index for each chart
            const XSIDatasets = [
                {
                    label: cleanLabel('XSI East Asia → North Europe'),
                    data: finalChartData.map(item => item.XSI_East_Asia_North_Europe),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 2,
                    fill: false
                },
                {
                    label: cleanLabel('XSI North Europe → East Asia'),
                    data: finalChartData.map(item => item.XSI_North_Europe_East_Asia),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('XSI East Asia → US West Coast'),
                    data: finalChartData.map(item => item.XSI_East_Asia_US_West_Coast),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('XSI US West Coast → East Asia'),
                    data: finalChartData.map(item => item.XSI_US_West_Coast_East_Asia),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('XSI East Asia → South America East Coast'),
                    data: finalChartData.map(item => item.XSI_East_Asia_South_America_East_Coast),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('XSI North Europe → US East Coast'),
                    data: finalChartData.map(item => item.XSI_North_Europe_US_East_Coast),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('XSI US East Coast → North Europe'),
                    data: finalChartData.map(item => item.XSI_US_East_Coast_North_Europe),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                },
                {
                    label: cleanLabel('XSI North Europe → South America East Coast'),
                    data: finalChartData.map(item => item.XSI_North_Europe_South_America_East_Coast),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 1,
                    fill: false
                }
            ];
            XSIChart = setupChart('XSIChart', 'line', XSIDatasets, chartDates);

            // Chart 8: MBCI - All relevant indices (only one in this case)
            colorIndex = 0; // Reset color index for each chart
            const MBCIDatasets = [
                {
                    label: cleanLabel('MBCI Value'),
                    data: finalChartData.map(item => item.MBCI_MBCI_Value),
                    backgroundColor: getNextColor(),
                    borderColor: getNextBorderColor(),
                    borderWidth: 2,
                    fill: false
                }
            ];
            MBCIChart = setupChart('MBCIChart', 'line', MBCIDatasets, chartDates);


            // --- Setup and start auto-cycling for both sliders ---
            setupSlider('.top-info-slide', 10000); // 10 seconds for top info slider
            setupSlider('.chart-slide', 10000); // 10 seconds for chart slider

        } catch (error) {
            console.error("Error loading or processing JSON data:", error);
            // This error typically means the JSON data structure is unexpected or missing
            // We should not overwrite the entire container if the issue is just with one element update
            // Instead, display a more specific error or fallback for the problematic section
            // For now, let's just log the error and ensure other parts of the dashboard still try to load.
            // If the error prevents ALL charts from loading, then the below might be needed,
            // but for a TypeError on a specific element, it's better to let other elements try to render.
            // document.querySelector('.chart-slider-container').innerHTML = '<p class="placeholder-text" style="color: red;">Error loading chart data. Please check the console.</p>';
        }
    }

    // Initial world clock update and 1-second interval update
    updateWorldClocks();
    setInterval(updateWorldClocks, 1000);

    // Update last updated time
    document.getElementById('last-updated').textContent = `Last Updated: ${new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true })}`;

    // Start loading JSON data and displaying the dashboard
    loadAndDisplayData();
});
```
**현재 `js-chart` Canvas에 대한 설명:**

* **1년치 월별 평균 데이터:** `aggregateDataByMonth` 함수를 수정하여 원본 데이터의 가장 최신 날짜를 기준으로 **정확히 지난 12개월에 해당하는 모든 월을 계산**합니다. 데이터가 없는 월이라도 차트의 X축에 해당 월이 표시될 수 있도록 `null` 값으로 처리하여 1년치 기간을 일관성 있게 보여줍니다.
* **날짜 축 포맷 및 틱:** `time.unit: 'month'`와 `displayFormats: { month: 'MMM \'YY' }` 설정은 유지되며, `maxTicksLimit: 12`와 `autoSkipPadding: 10`을 통해 12개월치 데이터가 적절하게 표시되도록 틱을 조정합니다.
* **범례 라벨 정리:** `cleanLabel` 헬퍼 함수를 사용하여 각 지수 이름 앞에 붙던 접두사(예: "KCCI ", "SCFI ")를 제거하고, 노선 이름만 깔끔하게 표시되도록 했습니다.
* **환율 차트 X축 틱 조정:** 환율 차트의 X축 `maxTicksLimit`를 제거하여 Chart.js가 한 달치 데이터에 대해 더 적절한 틱을 자동으로 표시하도록 했습니다.

**다음 단계:**

1.  **`js/chart.js` 파일 업데이트:** 위에 제공된 `js-chart` Canvas의 코드를 복사하여 당신의 `js/chart.js` 파일에 **덮어쓰기** 합니다.
2.  **커밋 및 푸시:** 변경사항을 저장하고 `main` 브랜치에 커밋 및 푸시합니다.
    * `git add js/chart.js`
    * `git commit -m "Fix: Implemented 1-year monthly average for charts, refined date axis, and cleaned legend labels"`
    * `git push origin main`
3.  **GitHub Actions 워크플로우 확인:**
    * GitHub 저장소의 "Actions" 탭으로 이동하여 `Deploy Dashboard with Data` 워크플로우의 최신 실행이 성공했는지 확인합니다.
4.  **브라우저 캐시 강제 새로고침:**
    * GitHub Pages 대시보드를 방문하기 전에, **반드시 브라우저 캐시를 완전히 지우고 하드 새로고침**을 수행합니다. (개발자 도구를 열고, 새로고침 버튼을 마우스 오른쪽 버튼으로 클릭하여 "캐시 비우기 및 강력 새로고침"을 선택하는 것이 가장 확실합니다.)
5.  **잠시 기다리기:**
    * 배포가 완료된 후에도 **최소 5~10분 정도 기다려 주세요.** CDN 캐시가 전 세계적으로 업데이트되는 데 시간이 걸릴 수 있습니다.

이 수정으로 차트가 1년치 데이터를 월별 평균으로 올바르게 표시하고, 날짜 축이 개선되며, 범례 라벨도 깔끔하게 나타나기를 진심으로 바랍
