// Chart instances global variables
let salesChart;
let expensesChart;
let productSalesChart;
let inventoryChart;
let satisfactionChart;
let trafficChart;
let productivityChart;

// Path to the JSON data file generated by the Python script
const DATA_JSON_URL = 'data/crawling_data.json';

document.addEventListener('DOMContentLoaded', () => {
    // --- Chart Initialization Function ---
    // This function creates or updates a Chart.js instance.
    const setupChart = (chartId, type, label, data, backgroundColor, borderColor, labels = [], additionalOptions = {}) => {
        const ctx = document.getElementById(chartId);
        if (ctx) {
            // Destroy existing chart instance if it exists to prevent conflicts
            if (Chart.getChart(chartId)) {
                Chart.getChart(chartId).destroy();
            }

            const defaultOptions = {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    x: {
                        display: true,
                        title: {
                            display: true,
                            text: 'Date' // Default X-axis title
                        }
                    },
                    y: {
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Value' // Default Y-axis title
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'top'
                    },
                    tooltip: {
                        mode: 'index',
                        intersect: false
                    }
                }
            };

            // Merge default options with any additional options provided
            const options = { ...defaultOptions, ...additionalOptions };
            if (options.scales && additionalOptions.scales) {
                options.scales = { ...defaultOptions.scales, ...additionalOptions.scales };
                if (options.scales.x && additionalOptions.scales.x) {
                    options.scales.x = { ...defaultOptions.scales.x, ...additionalOptions.scales.x };
                }
                if (options.scales.y && additionalOptions.scales.y) {
                    options.scales.y = { ...defaultOptions.scales.y, ...additionalOptions.scales.y };
                }
            }


            return new Chart(ctx, {
                type: type,
                data: {
                    labels: labels,
                    datasets: [{
                        label: label,
                        data: data,
                        backgroundColor: backgroundColor,
                        borderColor: borderColor,
                        borderWidth: 1,
                        fill: type === 'line' || type === 'radar' || type === 'polarArea' // Fill for line, radar, polarArea charts
                    }]
                },
                options: options
            });
        }
        return null;
    };

    // --- Chart Slider Logic ---
    const chartSlides = document.querySelectorAll('.chart-slide');
    let currentChartSlide = 0;
    const chartSlideInterval = 10000; // 10 seconds (in milliseconds)

    function showChartSlide(index) {
        chartSlides.forEach((slide, i) => {
            if (i === index) {
                slide.classList.add('active');
            } else {
                slide.classList.remove('active');
            }
        });
    }

    function nextChartSlide() {
        currentChartSlide = (currentChartSlide + 1) % chartSlides.length;
        showChartSlide(currentChartSlide);
    }

    // --- World Clock Logic ---
    // Map of city keys (matching HTML IDs) to IANA time zone identifiers
    const cityTimezones = {
        'la': 'America/Los_Angeles',
        'ny': 'America/New_York',
        'paris': 'Europe/Paris',
        'shanghai': 'Asia/Shanghai',
        'seoul': 'Asia/Seoul',
        'sydney': 'Australia/Sydney'
    };

    function updateWorldClocks() {
        const now = new Date(); // Get current time (UTC)

        for (const cityKey in cityTimezones) {
            const timezone = cityTimezones[cityKey];
            const options = {
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit',
                hour12: false, // 24-hour format
                timeZone: timezone // Apply the specific city's time zone
            };
            // Intl.DateTimeFormat automatically handles Daylight Saving Time
            const timeString = new Intl.DateTimeFormat('en-US', options).format(now); // Use 'en-US' for consistent formatting
            
            const elementId = `time-${cityKey}`; // Construct HTML ID (e.g., 'time-la')
            const timeElement = document.getElementById(elementId);
            if (timeElement) {
                timeElement.textContent = timeString;
            }
        }
    }

    // --- Data Loading and Dashboard Update Function ---
    async function loadAndDisplayData() {
        let rawData = [];
        try {
            const response = await fetch(DATA_JSON_URL);
            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }
            rawData = await response.json();
            console.log("Loaded data:", rawData);

            if (rawData.length === 0) {
                console.warn("No data found in the JSON file.");
                // Optionally display a message on the dashboard if no data
                document.querySelector('.chart-slider-container').innerHTML = '<p class="placeholder-text">No chart data available.</p>';
                return;
            }

            // --- Update Weather Info (Placeholder for now, assumes data is in JSON) ---
            // If weather data is in crawling_data.json, you'd extract it here.
            // Example: const weatherInfo = rawData.find(item => item.type === 'weather');
            // For now, keeping placeholders as the provided data snippet doesn't contain it.

            // --- Update Exchange Rate Info (Placeholder for now, assumes data is in JSON) ---
            // If exchange rate data is in crawling_data.json, you'd extract it here.
            // Example: const exchangeRates = rawData.find(item => item.type === 'exchange_rates');
            // For now, keeping placeholders.

            // --- Prepare Chart Data and Initialize Charts ---
            const dates = rawData.map(item => item.date); // X-axis labels (dates)

            // Define datasets for each of the 7 charts based on cleaned headers
            // Ensure these match the cleaned headers in fetch_chart_data.py
            // Chart 1: KCCI Composite Index
            salesChart = setupChart(
                'salesChart', 'line', 'KCCI Composite Index (Point)',
                rawData.map(item => item.KCCI_Composite_Index),
                'rgba(0, 101, 126, 0.8)', // Teal
                '#00657e', // Darker Teal
                dates
            );

            // Chart 2: SCFI Composite Index
            expensesChart = setupChart(
                'expensesChart', 'line', 'SCFI Composite Index ($/TEU)',
                rawData.map(item => item.SCFI_Composite_Index),
                'rgba(0, 58, 82, 0.8)', // Navy
                '#003A52', // Darker Navy
                dates
            );

            // Chart 3: WCI Composite Index (Shanghai → Rotterdam)
            productSalesChart = setupChart(
                'productSalesChart', 'line', 'WCI Shanghai → Rotterdam ($/FEU)',
                rawData.map(item => item.Shanghai_Rotterdam),
                'rgba(0, 101, 126, 0.6)', // Teal
                '#00657e', // Darker Teal
                dates
            );

            // Chart 4: IACI Composite Index
            inventoryChart = setupChart(
                'inventoryChart', 'bar', 'IACI Composite Index',
                rawData.map(item => item.IACI_Composite_Index),
                'rgba(0, 58, 82, 0.6)', // Navy
                '#003A52', // Darker Navy
                dates
            );

            // Chart 5: BLANK_SAILING Total
            satisfactionChart = setupChart(
                'satisfactionChart', 'line', 'Total Blank Sailings',
                rawData.map(item => item.Total_Blank_Sailings),
                'rgba(0, 101, 126, 0.7)', // Teal
                '#00657e', // Darker Teal
                dates
            );

            // Chart 6: FBX China/East Asia → US West Coast
            trafficChart = setupChart(
                'trafficChart', 'bar', 'FBX China/EA → US West Coast ($/FEU)',
                rawData.map(item => item.China_EA_US_West_Coast),
                'rgba(0, 58, 82, 0.7)', // Navy
                '#003A52', // Darker Navy
                dates
            );

            // Chart 7: XSI East Asia → North Europe
            productivityChart = setupChart(
                'productivityChart', 'line', 'XSI East Asia → North Europe ($/FEU)',
                rawData.map(item => item.East_Asia_North_Europe_XSI),
                'rgba(0, 101, 126, 0.6)', // Teal
                '#00657e', // Darker Teal
                dates
            );

            // Start the chart slider after all charts are initialized
            showChartSlide(currentChartSlide);
            setInterval(nextChartSlide, chartSlideInterval);

        } catch (error) {
            console.error("Error loading or processing JSON data:", error);
            // Display an error message if data loading fails
            document.querySelector('.chart-slider-container').innerHTML = '<p class="placeholder-text" style="color: red;">Error loading chart data. Please check the console.</p>';
        }
    }

    // Initial world clock update and 1-second interval update
    updateWorldClocks();
    setInterval(updateWorldClocks, 1000);

    // Update last updated time
    document.getElementById('last-updated').textContent = `Last Updated: ${new Date().toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', second: '2-digit', hour12: true })}`;

    // Start loading JSON data and displaying the dashboard
    loadAndDisplayData();
});
